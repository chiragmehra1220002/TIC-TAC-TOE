{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\REACT JS TASKS\\\\tic-tac-toe\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// import logo from './logo.svg';\nimport './globalCSS.css';\nimport Board from \"./Board.jsx\";\nimport Square from \"./Square.jsx\";\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultSquares = () => new Array(9).fill(null); //? returns a new array initialized with null values\nconst lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // ? Winning combinations containing array indices\n\nlet App = () => {\n  _s();\n  const [squares, setValue] = useState(defaultSquares());\n  const [winner, setWinner] = useState(null);\n  const [isPlayer1, setIsPlayer1] = useState(true); // true for Player 1, false for Player 2 (computer)\n\n  useEffect(() => {\n    const isComputerTurn = squares.filter(square => square !== null).length % 2 === 1;\n\n    // Function to check for winning lines\n    const linesThatAre = (a, b, c) => {\n      return lines.filter(squareIndexes => {\n        const squareValues = squareIndexes.map(index => squares[index]);\n        return JSON.stringify([a, b, c].sort()) === JSON.stringify(squareValues.sort());\n      });\n    };\n\n    // Check for empty squares to allow the computer to make a move\n    const emptyIndexes = squares.map((square, index) => square === null ? index : null).filter(val => val !== null);\n\n    // Check if player or computer has won\n    const playerWon = linesThatAre('x', 'x', 'x').length > 0;\n    const computerWon = linesThatAre('o', 'o', 'o').length > 0;\n    if (playerWon) {\n      setWinner('x');\n    } else if (computerWon) {\n      setWinner('o');\n    } else if (squares.every(square => square !== null)) {\n      // If no winner and board is full, it's a draw\n      setWinner('draw');\n    }\n\n    // Function to put the computer's move on the board\n    const putComputerAt = index => {\n      let newSquares = [...squares]; // Create a new array to avoid mutation\n      newSquares[index] = 'o'; // Place computer's move\n      setValue(newSquares); // Update state with the new array\n    };\n    if (isComputerTurn && !isPlayer1) {\n      // Computer move logic\n      const winningLines = linesThatAre('o', 'o', null);\n      if (winningLines.length > 0) {\n        const winIndex = winningLines[0].filter(index => squares[index] === null)[0];\n        putComputerAt(winIndex); // Make the winning move\n        return;\n      }\n      const linesToBlock = linesThatAre('x', 'x', null);\n      if (linesToBlock.length > 0) {\n        const blockIndex = linesToBlock[0].filter(index => squares[index] === null)[0];\n        putComputerAt(blockIndex); // Block player's winning move\n        return;\n      }\n      const linesToContinue = linesThatAre('o', null, null);\n      if (linesToContinue.length > 0) {\n        putComputerAt(linesToContinue[0].filter(index => squares[index] === null)[0]);\n        return;\n      }\n\n      // If no winning or blocking move, pick a random empty square\n      const randomIndex = emptyIndexes[Math.floor(Math.random() * emptyIndexes.length)];\n      putComputerAt(randomIndex);\n    }\n  }, [squares, isPlayer1]); // Effect runs when squares or isPlayer1 state changes\n\n  const handleSquareClick = index => {\n    if (squares[index] === null && isPlayer1) {\n      // Only allow click if square is empty\n      let newSquares = [...squares];\n      newSquares[index] = 'x';\n      setValue(newSquares);\n    }\n  };\n  const togglePlayer = () => {\n    setIsPlayer1(!isPlayer1);\n    if (isPlayer1) {\n      setValue(defaultSquares()); // Only reset board when switching to the computer\n    }\n    setWinner(null); // Reset winner\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePlayer,\n        children: isPlayer1 ? 'Switch to Player 2 (Computer)' : 'Switch to Player 1'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      children: squares.map((square, index) => /*#__PURE__*/_jsxDEV(Square, {\n        x: square === 'x' ? 1 : 0,\n        o: square === 'o' ? 1 : 0,\n        onClick: () => handleSquareClick(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), !!winner && winner === 'o' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result red\",\n      children: \"YOU LOST!!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), !!winner && winner === 'x' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result green\",\n      children: \"YOU WON\\uD83D\\uDE0E\\uD83D\\uDE0E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this), !!winner && winner === 'draw' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: \"It's a DRAW!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"TzJuKQdKcJD4QWradm1kfVY5F1I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Board","Square","useState","useEffect","jsxDEV","_jsxDEV","defaultSquares","Array","fill","lines","App","_s","squares","setValue","winner","setWinner","isPlayer1","setIsPlayer1","isComputerTurn","filter","square","length","linesThatAre","a","b","c","squareIndexes","squareValues","map","index","JSON","stringify","sort","emptyIndexes","val","playerWon","computerWon","every","putComputerAt","newSquares","winningLines","winIndex","linesToBlock","blockIndex","linesToContinue","randomIndex","Math","floor","random","handleSquareClick","togglePlayer","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","x","o","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/REACT JS TASKS/tic-tac-toe/src/App.jsx"],"sourcesContent":["// import logo from './logo.svg';\r\nimport './globalCSS.css';\r\nimport Board from \"./Board.jsx\";\r\nimport Square from \"./Square.jsx\";\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst defaultSquares = () => (new Array(9).fill(null)); //? returns a new array initialized with null values\r\nconst lines = [\r\n  [0, 1, 2], [3, 4, 5], [6, 7, 8],\r\n  [0, 3, 6], [1, 4, 7], [2, 5, 8],\r\n  [0, 4, 8], [2, 4, 6]\r\n]; // ? Winning combinations containing array indices\r\n\r\nlet App = () => {\r\n  const [squares, setValue] = useState(defaultSquares());\r\n  const [winner, setWinner] = useState(null);\r\n  const [isPlayer1, setIsPlayer1] = useState(true); // true for Player 1, false for Player 2 (computer)\r\n  \r\n  useEffect(() => {\r\n    const isComputerTurn = squares.filter(square => square !== null).length % 2 === 1;\r\n  \r\n    // Function to check for winning lines\r\n    const linesThatAre = (a, b, c) => {\r\n      return lines.filter(squareIndexes => {\r\n        const squareValues = squareIndexes.map(index => squares[index]);\r\n        return JSON.stringify([a, b, c].sort()) === JSON.stringify(squareValues.sort());\r\n      });\r\n    };\r\n  \r\n    // Check for empty squares to allow the computer to make a move\r\n    const emptyIndexes = squares.map((square, index) => square === null ? index : null).filter(val => val !== null);\r\n  \r\n    // Check if player or computer has won\r\n    const playerWon = linesThatAre('x', 'x', 'x').length > 0;\r\n    const computerWon = linesThatAre('o', 'o', 'o').length > 0;\r\n  \r\n    if (playerWon) {\r\n      setWinner('x');\r\n    } else if (computerWon) {\r\n      setWinner('o');\r\n    } else if (squares.every(square => square !== null)) {\r\n      // If no winner and board is full, it's a draw\r\n      setWinner('draw');\r\n    }\r\n  \r\n    // Function to put the computer's move on the board\r\n    const putComputerAt = (index) => {\r\n      let newSquares = [...squares]; // Create a new array to avoid mutation\r\n      newSquares[index] = 'o'; // Place computer's move\r\n      setValue(newSquares); // Update state with the new array\r\n    };\r\n  \r\n    if (isComputerTurn && !isPlayer1) {\r\n      // Computer move logic\r\n      const winningLines = linesThatAre('o', 'o', null);\r\n      if (winningLines.length > 0) {\r\n        const winIndex = winningLines[0].filter(index => squares[index] === null)[0];\r\n        putComputerAt(winIndex); // Make the winning move\r\n        return;\r\n      }\r\n  \r\n      const linesToBlock = linesThatAre('x', 'x', null);\r\n      if (linesToBlock.length > 0) {\r\n        const blockIndex = linesToBlock[0].filter(index => squares[index] === null)[0];\r\n        putComputerAt(blockIndex); // Block player's winning move\r\n        return;\r\n      }\r\n  \r\n      const linesToContinue = linesThatAre('o', null, null);\r\n      if (linesToContinue.length > 0) {\r\n        putComputerAt(linesToContinue[0].filter(index => squares[index] === null)[0]);\r\n        return;\r\n      }\r\n  \r\n      // If no winning or blocking move, pick a random empty square\r\n      const randomIndex = emptyIndexes[Math.floor(Math.random() * emptyIndexes.length)];\r\n      putComputerAt(randomIndex);\r\n    }\r\n  \r\n  }, [squares, isPlayer1]); // Effect runs when squares or isPlayer1 state changes\r\n  \r\n\r\n  const handleSquareClick = index => {\r\n    if (squares[index] === null && isPlayer1) { // Only allow click if square is empty\r\n      let newSquares = [...squares];\r\n      newSquares[index] = 'x';\r\n      setValue(newSquares);\r\n    }\r\n  };\r\n\r\n  const togglePlayer = () => {\r\n    setIsPlayer1(!isPlayer1);\r\n    if (isPlayer1) {\r\n      setValue(defaultSquares()); // Only reset board when switching to the computer\r\n    }\r\n    setWinner(null); // Reset winner\r\n  };\r\n  return (\r\n    <main>\r\n      <div className=\"buttons\">\r\n        <button onClick={togglePlayer}>{isPlayer1 ? 'Switch to Player 2 (Computer)' : 'Switch to Player 1'}</button>\r\n      </div>\r\n      <Board>\r\n        {squares.map((square, index) =>\r\n          <Square\r\n            key={index}\r\n            x={square === 'x' ? 1 : 0}\r\n            o={square === 'o' ? 1 : 0}\r\n            onClick={() => handleSquareClick(index)} />\r\n        )}\r\n      </Board>\r\n      {!!winner && winner === 'o' && (\r\n        <div className=\"result red\">YOU LOST!!!</div>\r\n      )}\r\n      {!!winner && winner === 'x' && (\r\n        <div className=\"result green\">YOU WON😎😎</div>\r\n      )}\r\n      {!!winner && winner === 'draw' && (\r\n        <div className=\"result\">It's a DRAW!</div>\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}