{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\REACT JS TASKS\\\\tic-tac-toe\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport react, { useState } from 'react';\nimport './globalCSS.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet App = () => {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [isXTurn, setXTurn] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const renderSquare = index => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"square\",\n      onClick: () => handleClick(index),\n      children: board[index]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this);\n  };\n  let handleClick = index => {\n    console.log(index, \"Click\");\n    let newBoard = [...board];\n    newBoard[index] = isXTurn ? 'X' : 'O';\n    setBoard(newBoard);\n    setXTurn(!isXTurn);\n    const winnerCombination = checkWinner(newBoard);\n    if (winnerCombination) {\n      setWinner(newBoard[winnerCombination[0]]);\n    }\n  };\n  let checkWinner = newBoard => {\n    const combination = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    for (let i = 0; i < combination.length; i++) {\n      const [a, b, c] = combination[i];\n      if (board[a] == board[b] && board[b] == board[c]) {\n        return combination[i];\n      }\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [renderSquare(0), renderSquare(1), renderSquare(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [renderSquare(3), renderSquare(4), renderSquare(5)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [renderSquare(6), renderSquare(7), renderSquare(8)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"center\", {\n      children: [winner, \" is Winner of this Game.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"6IvVrdJvAs70iI+NVTYAFtchx68=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["react","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","board","setBoard","Array","fill","isXTurn","setXTurn","winner","setWinner","renderSquare","index","className","onClick","handleClick","children","fileName","_jsxFileName","lineNumber","columnNumber","console","log","newBoard","winnerCombination","checkWinner","combination","i","length","a","b","c","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/REACT JS TASKS/tic-tac-toe/src/App.jsx"],"sourcesContent":["\r\nimport react, { useState } from 'react';\r\nimport './globalCSS.css';\r\nlet App = () => {\r\n   const [board,setBoard] = useState(Array(9).fill(null))\r\n   const[isXTurn,setXTurn] = useState(true);\r\n   const[winner,setWinner] = useState(null);\r\n    const renderSquare = (index) => {\r\n        return (\r\n        \r\n            <button className='square' onClick={() => handleClick(index)}>{board[index]}</button>\r\n      \r\n\r\n        )\r\n        \r\n    }\r\n    let handleClick = (index) => {\r\n        console.log(index,\"Click\");\r\n        let newBoard = [...board];\r\n        newBoard[index] = isXTurn ? 'X' :'O';\r\n        setBoard(newBoard);\r\n        setXTurn(!isXTurn);\r\n        const  winnerCombination =checkWinner(newBoard);\r\n        if(winnerCombination){\r\n            setWinner(newBoard[winnerCombination[0]]);\r\n        }\r\n    }\r\n    let checkWinner = (newBoard) => {\r\n        const combination =[[0,1,2],[3,4,5],\r\n        [6,7,8],[0,3,6],\r\n        [1,4,7],[2,5,8],\r\n    [0,4,8],[2,4,6]];\r\n    for(let i=0;i<combination.length;i++)\r\n    {\r\n        const[a,b,c] = combination[i];\r\n        if(board[a] == board[b] && board[b] == board[c]){\r\n            return combination[i];\r\n        }\r\n    }\r\n    return null;\r\n    }\r\n    return(\r\n        <>\r\n        <div className='board'>\r\n            <div className='board-row'>\r\n                {renderSquare(0)}\r\n                {renderSquare(1)}\r\n                {renderSquare(2)}\r\n            </div>\r\n            <div className='board-row'>\r\n                {renderSquare(3)}\r\n                {renderSquare(4)}\r\n                {renderSquare(5)}\r\n            </div>\r\n            <div className='board-row'>\r\n                {renderSquare(6)}\r\n                {renderSquare(7)}\r\n                {renderSquare(8)}\r\n            </div>\r\n        </div>\r\n        {winner && <center>{winner} is Winner of this Game.</center>}\r\n    </>\r\n    )\r\n}\r\n\r\n\r\nexport default App;\r\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACzB,IAAIC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAACC,QAAQ,CAAC,GAAGR,QAAQ,CAACS,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EACtD,MAAK,CAACC,OAAO,EAACC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAK,CAACa,MAAM,EAACC,SAAS,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACvC,MAAMe,YAAY,GAAIC,KAAK,IAAK;IAC5B,oBAEId,OAAA;MAAQe,SAAS,EAAC,QAAQ;MAACC,OAAO,EAAEA,CAAA,KAAMC,WAAW,CAACH,KAAK,CAAE;MAAAI,QAAA,EAAEb,KAAK,CAACS,KAAK;IAAC;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAK7F,CAAC;EACD,IAAIL,WAAW,GAAIH,KAAK,IAAK;IACzBS,OAAO,CAACC,GAAG,CAACV,KAAK,EAAC,OAAO,CAAC;IAC1B,IAAIW,QAAQ,GAAG,CAAC,GAAGpB,KAAK,CAAC;IACzBoB,QAAQ,CAACX,KAAK,CAAC,GAAGL,OAAO,GAAG,GAAG,GAAE,GAAG;IACpCH,QAAQ,CAACmB,QAAQ,CAAC;IAClBf,QAAQ,CAAC,CAACD,OAAO,CAAC;IAClB,MAAOiB,iBAAiB,GAAEC,WAAW,CAACF,QAAQ,CAAC;IAC/C,IAAGC,iBAAiB,EAAC;MACjBd,SAAS,CAACa,QAAQ,CAACC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7C;EACJ,CAAC;EACD,IAAIC,WAAW,GAAIF,QAAQ,IAAK;IAC5B,MAAMG,WAAW,GAAE,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EACnC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EACf,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EACnB,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IAChB,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,WAAW,CAACE,MAAM,EAACD,CAAC,EAAE,EACpC;MACI,MAAK,CAACE,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC,GAAGL,WAAW,CAACC,CAAC,CAAC;MAC7B,IAAGxB,KAAK,CAAC0B,CAAC,CAAC,IAAI1B,KAAK,CAAC2B,CAAC,CAAC,IAAI3B,KAAK,CAAC2B,CAAC,CAAC,IAAI3B,KAAK,CAAC4B,CAAC,CAAC,EAAC;QAC5C,OAAOL,WAAW,CAACC,CAAC,CAAC;MACzB;IACJ;IACA,OAAO,IAAI;EACX,CAAC;EACD,oBACI7B,OAAA,CAAAE,SAAA;IAAAgB,QAAA,gBACAlB,OAAA;MAAKe,SAAS,EAAC,OAAO;MAAAG,QAAA,gBAClBlB,OAAA;QAAKe,SAAS,EAAC,WAAW;QAAAG,QAAA,GACrBL,YAAY,CAAC,CAAC,CAAC,EACfA,YAAY,CAAC,CAAC,CAAC,EACfA,YAAY,CAAC,CAAC,CAAC;MAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC,eACNtB,OAAA;QAAKe,SAAS,EAAC,WAAW;QAAAG,QAAA,GACrBL,YAAY,CAAC,CAAC,CAAC,EACfA,YAAY,CAAC,CAAC,CAAC,EACfA,YAAY,CAAC,CAAC,CAAC;MAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC,eACNtB,OAAA;QAAKe,SAAS,EAAC,WAAW;QAAAG,QAAA,GACrBL,YAAY,CAAC,CAAC,CAAC,EACfA,YAAY,CAAC,CAAC,CAAC,EACfA,YAAY,CAAC,CAAC,CAAC;MAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,EACLX,MAAM,iBAAIX,OAAA;MAAAkB,QAAA,GAASP,MAAM,EAAC,0BAAwB;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eAC9D,CAAC;AAEP,CAAC;AAAAlB,EAAA,CA5DGD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AA+DP,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}